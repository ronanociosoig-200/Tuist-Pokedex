#!/usr/bin/swift

import Foundation

let arguments = CommandLine.arguments
guard arguments.count == 2 else {
    print("Incorrect usage. Needs JSON file as a parameter generated by xcresulttool")
    exit(0)
}
let file = arguments[1]
let filePath = FileManager.default.currentDirectoryPath + "/" + file
guard let json = try? String(contentsOfFile: filePath, encoding: .utf8), let data = json.data(using: .utf8) else {
    print("Error: Invalid JSON")
    exit(0)
}

guard let xcResult = try? JSONDecoder().decode(XCResult.self, from: data) else {
    print("Parse error. Invalid JSON")
    exit(0)
}

let metrics = xcResult.metrics
let coverage = metrics.totalCoveragePercentage
let value = coverage.value
let totalCoveragePercentage = (Double(value)) ?? 0
print("Test coverage: \((totalCoveragePercentage) * 100) %")
let testsCount = metrics.testsCount
print("Number of tests: \(testsCount.value)")
if let warnings = metrics.warningCount {
    print("Number of warnings: \(warnings.value)")
}

// 
// This file was generated from JSON Schema using quicktype

// MARK: - TypeClass
struct TypeClass: Codable {
    let name: String

    enum CodingKeys: String, CodingKey {
        case name = "_name"
    }
}

// MARK: - ID
struct ID: Codable {
    let type: TypeClass
    let value: String

    enum CodingKeys: String, CodingKey {
        case type = "_type"
        case value = "_value"
    }
}

// MARK: - XCResultMetrics
struct XCResultMetrics: Codable {
    let type: TypeClass
    let testsCount, totalCoveragePercentage: ID
    let warningCount: ID?

    enum CodingKeys: String, CodingKey {
        case type = "_type"
        case testsCount, totalCoveragePercentage, warningCount
    }
}

// MARK: - XCResult
struct XCResult: Codable {
    let type: TypeClass
    let metrics: XCResultMetrics

    enum CodingKeys: String, CodingKey {
        case type = "_type"
        case metrics
    }
}
