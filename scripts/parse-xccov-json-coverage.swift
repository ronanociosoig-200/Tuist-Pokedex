#!/usr/bin/env swift

import Foundation

struct CoverageReport: Codable {
    let lines: Int
    let coverage: Double
    let targets: [Target]

    private enum CodingKeys: String, CodingKey {
        case lines = "coveredLines"
        case coverage = "lineCoverage"
        case targets = "targets"
    }
}

struct Target: Codable {
    let name: String
    let lines: Int
    let coverage: Double
    
    private enum CodingKeys: String, CodingKey {
        case lines = "coveredLines"
        case coverage = "lineCoverage"
        case name = "name"
    }
}

let arguments = CommandLine.arguments
guard arguments.count >= 2 else {
    print("Incorrect parameters. Include JSON file generated by \"xcrun xccov view --report --json <tests.xcresult> \"")
    print("Usage: <script> file.JSON <optional parameter> terse")
    exit(0)
}
let file = CommandLine.arguments[1] 
var terse = false
if arguments.count == 3 && CommandLine.arguments[2] == "terse" {
terse = true
}

let currentDirectoryPath = FileManager.default.currentDirectoryPath
let filePath = currentDirectoryPath + "/" + file
guard let json = try? String(contentsOfFile: filePath, encoding: .utf8), let data = json.data(using: .utf8) else {
    print("Error: Invalid JSON")
    exit(0)
}
guard let report = try? JSONDecoder().decode(CoverageReport.self, from: data) else {
    print("Error: Could not decode the report.")
    exit(0)
}

let percentFormatter = NumberFormatter()
percentFormatter.numberStyle = .percent
percentFormatter.minimumFractionDigits = 2
percentFormatter.maximumFractionDigits = 2

let decimalFormatter = NumberFormatter()
decimalFormatter.numberStyle = .decimal
decimalFormatter.minimumFractionDigits = 2
decimalFormatter.maximumFractionDigits = 2

for target in report.targets {
    if terse {
        let coveragePercent = target.coverage * 100.0
        let printableCoverage = decimalFormatter.string(from: NSNumber(value: coveragePercent)) ?? "0.0"
        print("\(target.name) \(String(describing: printableCoverage))")
    } else {
        let coveragePercent = percentFormatter.string(from: NSNumber(value: target.coverage)) ?? "0.0"
        print("\(target.name) \(String(describing: coveragePercent))")
    }
}

guard let coveragePercent = percentFormatter.string(from: NSNumber(value: report.coverage)) else {
    print("Error: Could not generate code coverage percentage.")
    exit(0)
}

if !terse {
    print("------")
    print("Total \(coveragePercent) code coverage based on \(report.lines) lines.")
}




