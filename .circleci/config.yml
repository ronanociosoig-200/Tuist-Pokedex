# .circleci/config.yml

version: 2.1

parameters:
  xcode_version:
    type: string
    default: "14.2.0"
  device:
    type: string
    default: "\"iPhone 14\""
  ios_version:
    type: string
    default: "16.2"
  tuist: 
    type: string
    default: ".tuist-bin/tuist"
    # disable version in cache and use bundled version instead
    # ~/.tuist/Versions/3.19.0/tuist
  tuist_version:
    type: string
    default: "3.19.0"
  test_output_path:
    type: string
    default: "output/tests"
  simulator_apps_path: 
    type: string
    default: "simulatorApps"
  derived_data_path:
    type: string
    default: "/Users/distiller/Library/Developer/Xcode/DerivedData"

commands:
  generate_lock_files: 
    steps: 
      - run:
          name: Create tuist checksum file
          command: find Project.swift Tuist -type f | xargs -P 2 shasum > Tuist.lock
      - run: 
          name: Create sources checksum file
          command: find App Core Features -type f | xargs -P 2 shasum > TuistSources.lock 
  install_tuist:
    steps:
      - run: 
          name: List Installed versions
          command: |
            VERSIONS_DIR="~/.tuist/Versions"
            FULL_PATH=`eval echo "${VERSIONS_DIR}"`

            if [ -d $FULL_PATH ]; then
              ls -1FG $FULL_PATH
            else
              echo "Tuist versions not found at " $FULL_PATH
            fi
      - run: 
          name: Check for XCFrameworks in the restored caches
          command: find ~/.tuist -name "*.xcframework"
      # Disable tuist install because it will use the bundled version instead
      #- run:
      #    name: Installing Tuist
      #    command: |
      #      [ -f <<pipeline.parameters.tuist>> ] && echo "Skipping tuist install" || bash <(curl -Ls https://install.tuist.io)
      #- run:
      #    name: Install Tuist specific version
      #    command: |
      #      [ -f <<pipeline.parameters.tuist>> ] && echo "Skipping tuist install" || tuist install <<pipeline.parameters.tuist_version>>
  setup_tuist:          
    steps: 
      #- run: 
      #    name: Clean Tuist (Temporary)
      #    command: <<pipeline.parameters.tuist>> clean tests
      - run: 
          name: Tuist Fetch Dependencies
          command: <<pipeline.parameters.tuist>> fetch
          #command: |
          #  [ -d Tuist/Dependencies/SwiftPackageManager/.build ] && echo "Skipping fetch" || tuist fetch 
      - run:
          name: Tuist Cache Warm
          command: TUIST_CONFIG_CLOUD_TOKEN="vCQ1yj6X" <<pipeline.parameters.tuist>> cache warm -x
      - run:
          name: Check for XCFrameworks in the restored caches post-cache-warm
          command: find ~/.tuist -name "*.xcframework"
      - run:
          name: Check for compiled frameworks in the restored caches post-cache-warm
          command: find ~/.tuist -name "*.framework"
      - run: 
          name: Check for anything in the build cache 
          command: ls -l ~/.tuist/Cache/BuildCache/
      - run: 
          name: Tuist Generate Project
          command: TUIST_CONFIG_CLOUD_TOKEN=$TUIST_CLOUD_TOKEN <<pipeline.parameters.tuist>> generate -xn
  build_project:
    steps:
      - run: 
          name: Build Pokedex App
          command: <<pipeline.parameters.tuist>> build --generate --device <<pipeline.parameters.device>> --os <<pipeline.parameters.ios_version>>
          #  xcodebuild -workspace Pokedex.xcworkspace -scheme Pokedex -destination 'platform=iOS Simulator,name=iPhone 14,OS=16.4'
      - run:
          name: Check for XCFrameworks in the build cache post-build
          command: find ~/.tuist -name "*.xcframework"
      - run:
          name: Check for compiled frameworks in the build cache post-build
          command: find ~/.tuist -name "*.framework"
  run_lint:
    steps: 
      - run:
          name: Tuist Lint 
          command: <<pipeline.parameters.tuist>> lint
  run_tests:
    steps:
      - run: 
          name: Check Tuist version
          command: <<pipeline.parameters.tuist>> version
      - run: 
          name: Tuist Test
          command: TUIST_CONFIG_CLOUD_TOKEN="vCQ1yj6X" <<pipeline.parameters.tuist>> test --result-bundle-path <<pipeline.parameters.test_output_path>> --device <<pipeline.parameters.device>> --os <<pipeline.parameters.ios_version>>
  compress_simulator_apps:
    steps:
      - run: 
          name: Find And Compress .app Files Excluding Tests runners
          command: sh scripts/compressSimulatorBuilds.sh
  run_xcode_build_test:
    steps:
      - run:
          name: Generate full project (this is needed if only some targets are updated previously)
          command: <<pipeline.parameters.tuist>> generate -xn
      - run:
          name: xcodebuild test Pokedex
          command: xcodebuild -workspace Pokedex.xcworkspace -scheme Pokedex -sdk iphonesimulator -destination "platform=iOS Simulator,name=iPhone 14,OS=16.2" test
  check_test_output:
    steps:
      - run:
          name: List test output
          command: |
            [ -d output/tests.xcresult] && ls -la output/tests.xcresult || echo "No test results available"
  install_xcresult_parser:
    steps:
      - run: 
          name: Brew Tap formulae 
          command: brew tap a7ex/homebrew-formulae
      - run:
          name: Install XCResultParser
          command: HOMEBREW_NO_AUTO_UPDATE=1 brew install xcresultparser
  run_xcresult_parser:
    steps:
      - run:
          name: Convert XCResult to HTML
          command: |
            [ -d output/tests.xcresult ] && tools/xcresultparser -c -o html output/tests.xcresult > output/test_results.html || echo "Nothing to parse in output dir"
      - run: 
          name: Extract code coverage data to text file 
          command: |
            [ -d output/tests.xcresult ] && sh scripts/extractCodeCoverageData.sh || echo "No data to extract"
      - run:
          name: Clean up XCResult
          command: |
            [ -d output/tests.xcresult ] && rm -r output/tests.xcresult || echo "XCResult dir not found"
  save_tuist_cache: 
    steps: 
      - save_cache:
          name: Save ~/.tuist
          key: source-tuist-{{ checksum ".tuist-version" }}-{{ checksum "Tuist.lock" }}
          paths:
            - ~/.tuist/Cache/Projects
            - ~/.tuist/Cache/BuildCache
            - ~/.tuist/Cache/Plugins
            - ~/.tuist/Cache/Manifests
            - ~/.tuist/Cache/ProjectDescriptionHelpers
            - ~/.tuist/Versions
  restore_tuist_cache:
    steps:
      - restore_cache:
          name: Restore ~/.tuist
          keys:
            - source-tuist-{{ checksum ".tuist-version" }}-{{ checksum "Tuist.lock" }}
            - source-tuist-{{ checksum ".tuist-version" }}
  save_dependencies_cache:
    steps:
      - save_cache:
          name: Save Dependencies
          key: dependencies-tuist-{{ checksum "Tuist/Dependencies/Lockfiles/Package.resolved" }}
          paths: 
            - Tuist/Dependencies/SwiftPackageManager
            - Tuist/Dependencies/graph.json
  restore_dependencies_cache:
    steps:
      - restore_cache:
          name: Restore Dependencies
          keys: 
            - dependencies-tuist-{{ checksum "Tuist/Dependencies.swift" }}
            - dependencies-tuist-
  save_tests_cache: 
    steps:
      - save_cache:
          name: Save Tests Cache
          key: tests-tuist-{{ checksum "TuistSources.lock" }}
          paths: 
            - ~/.tuist/Cache/TestsCache
  restore_tests_cache: 
    steps:
      - restore_cache:
          name: Restore Tests Cache
          keys: 
            - tests-tuist-{{ checksum "TuistSources.lock" }}
            - tests-tuist-
jobs:    
  build_and_test:
    macos: 
      xcode: <<pipeline.parameters.xcode_version>>
    resource_class: macos.x86.medium.gen2
    environment:
      TUIST_CONFIG_CLOUD_TOKEN: $TUIST_CLOUD_TOKEN
    steps:
      - checkout
      - generate_lock_files
      - restore_tuist_cache
      - restore_dependencies_cache
      - restore_tests_cache
      - install_tuist 
      - setup_tuist
      - save_dependencies_cache
      - build_project
      - run_lint
      - run_tests
      # - run_xcode_build_test
      - compress_simulator_apps
      - check_test_output
      # - install_xcresult_parser
      - run_xcresult_parser
      - store_test_results:
          path: output
      - store_artifacts:
          path: output
      - store_artifacts:
          path: <<pipeline.parameters.simulator_apps_path>>
      - save_tuist_cache
      - save_tests_cache

workflows: 
  build_and_test_workflow:
    jobs: 
      - build_and_test
