# .circleci/config.yml

version: 2.1

orbs:
  macos: circleci/macos@2.2.0

parameters:
  xcode_version:
    type: string
    default: "14.2.0"
  device:
    type: string
    default: "\"iPhone 14\""
  ios_version:
    type: string
    default: "16.2"
  tuist: 
    type: string
    default: "~/.tuist/Versions/3.19.0/tuist"
  tuist_version:
    type: string
    default: "3.19.0"
  test_output_path:
    type: string
    default: "output/tests"
  simulator_apps_path: 
    type: string
    default: "simulatorApps"

commands:
  install_tuist:
    steps:
      - run:
          name: Create tuist checksum file
          command: find Project.swift Tuist -type f | xargs -P 2 shasum > Tuist.lock
      - restore_cache:
          name: Restore ~/.tuist
          keys:
            - source-tuist-{{ checksum ".tuist-version" }}-{{ checksum "Tuist.lock" }}
            - source-tuist-{{ checksum ".tuist-version" }}
      - run: 
          name: List Installed versions
          command: |
            VERSIONS_DIR="~/.tuist/Versions"
            FULL_PATH=`eval echo "${VERSIONS_DIR}"`

            if [ -d $FULL_PATH ]; then
              ls -1FG $FULL_PATH
            else
              echo "Tuist versions not found at " $FULL_PATH
            fi
      - run:
          name: Installing Tuist
          command: |
            [ -f <<pipeline.parameters.tuist>> ] && echo "Skipping tuist install" || bash <(curl -Ls https://install.tuist.io)
      - run:
          name: Install Tuist specific version
          command: |
            [ -f <<pipeline.parameters.tuist>> ] && echo "Skipping tuist install" || tuist install <<pipeline.parameters.tuist_version>>
  setup_tuist:          
    steps: 
      #- run: 
      #    name: Clean Tuist (Temporary)
      #    command: tuist clean
      - run: 
          name: Tuist Fetch Dependencies
          command: <<pipeline.parameters.tuist>> fetch
          #command: |
          #  [ -d Tuist/Dependencies/SwiftPackageManager/.build ] && echo "Skipping fetch" || tuist fetch 
      - run: 
          name: Tuist Cache Warm
          command: TUIST_CONFIG_CLOUD_TOKEN=$TUIST_CLOUD_TOKEN <<pipeline.parameters.tuist>> cache warm -x
     # - run: 
     #     name: Tuist Generate Project
     #     command: TUIST_CONFIG_CLOUD_TOKEN=$TUIST_CLOUD_TOKEN <<pipeline.parameters.tuist>> generate -xn
  build_project:
    steps:
      - run: 
          name: Build Pokedex App
          command: xcodebuild -workspace Pokedex.xcworkspace -scheme Pokedex -destination 'platform=iOS Simulator,name=iPhone 14,OS=16.2'
  run_lint:
    steps: 
      - run:
          name: Tuist Lint 
          command: <<pipeline.parameters.tuist>> lint
  run_tests:
    steps:
      - run: 
          name: Get Current Dir
          command: pwd
      - run: 
          name: Tuist Test
          command: time <<pipeline.parameters.tuist>> test --result-bundle-path <<pipeline.parameters.test_output_path>> --device <<pipeline.parameters.device>> --os <<pipeline.parameters.ios_version>>
      - run: 
          name: Find And Compress .app Files Excluding Tests runners
          command: |
            find /Users/distiller/Library/Developer/Xcode/DerivedData -name "*.app" | grep -v "Tests-Runner" | while read in; do tar -cvzf "$in".tar.gz -C "$in" .; done
            find /Users/distiller/Library/Developer/Xcode/DerivedData -name "*.app.tar.gz"
            mkdir <<pipeline.parameters.simulator_apps_path>>
            find /Users/distiller/Library/Developer/Xcode/DerivedData -name "*.app.tar.gz" | while read in; do cp "$in" <<pipeline.parameters.simulator_apps_path>>; done
            ls -l <<pipeline.parameters.simulator_apps_path>>
  run_xcode_build_test:
    steps:
      - run :
          name: xcodebuild test
          command: time xcodebuild -workspace Pokedex.xcworkspace -scheme Pokedex -sdk iphonesimulator -destination "platform=iOS Simulator,name=iPhone 14,OS=16.4" test
  check_test_output:
    steps:
      - run:
          name: List test output
          command: ls -la output/tests.xcresult
  install_xcresult_parser:
    steps:
      - run: 
          name: Brew Tap formulae 
          command: brew tap a7ex/homebrew-formulae
      - run:
          name: Install XCResultParser
          command: HOMEBREW_NO_AUTO_UPDATE=1 brew install xcresultparser
  run_xcresult_parser:
    steps:
      - run:
          name: Convert XCResult to JUnit XML
          command: tools/xcresultparser -c -o junit output/tests.xcresult > output/test_results.xml
      - run:
          name: Clean up XCResult
          command: rm -r output/tests.xcresult 
  save_tuist_cache: 
    steps: 
      - save_cache:
          name: Save ~/.tuist
          key: source-tuist-{{ checksum ".tuist-version" }}-{{ checksum "Tuist.lock" }}
          paths:
            - ~/.tuist/Cache
            - ~/.tuist/Versions
  save_dependencies_cache:
    steps:
      - save_cache:
          name: Save Dependencies
          key: dependencies-tuist-{{ checksum "Tuist/Dependencies.swift" }}
          paths: 
            - Tuist/Dependencies
  restore_dependencies_cache:
    steps:
      - restore_cache:
          name: Restore Dependencies
          keys: 
            - dependencies-tuist-{{ checksum "Tuist/Dependencies.swift" }}
            - dependencies-tuist-
jobs:    
  build_and_test:
    macos: 
      xcode: <<pipeline.parameters.xcode_version>>
    environment:
      TUIST_CONFIG_CLOUD_TOKEN: $TUIST_CLOUD_TOKEN
    steps:
      - checkout
      - install_tuist 
      - restore_dependencies_cache
      - setup_tuist
      - save_dependencies_cache
      - run_lint
      - run_tests
      - check_test_output
      # - install_xcresult_parser
      - run_xcresult_parser
      - store_test_results:
          path: output
      - store_artifacts:
          path: output
      - store_artifacts:
          path: <<pipeline.parameters.simulator_apps_path>>
      - save_tuist_cache

workflows: 
  build_and_test_workflow:
    jobs: 
      - build_and_test
